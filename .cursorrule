---
description: Establish consistent structure, optimization, and development standards for Quantum CRM using Next.js, Prisma, Supabase, and Tailwind CSS
globs: [src//*.{tsx,ts,js,jsx}]
alwaysApply: true
---

- Maintain modular file structure: src/app for routes, src/components for UI, src/lib for utilities
- Always reuse and improve existing components before creating new ones
- Keep TypeScript types in sync with Prisma schema under src/types
- Use TanStack Query for all data fetching, caching, and mutation flows
- Apply Server Components by default; only use 'use client' where strictly necessary
- Validate API requests and mutations with Zod schemas in backend routes
- Organize API routes under src/app/api following RESTful conventions
- Standardize form handling using react-hook-form when adding or editing entities
- Implement TailwindCSS for all styling; avoid custom CSS unless absolutely required
- Ensure lazy loading and Suspense are used for heavy or async components

---

description: Define component, hooks, and utility development standards
globs: [src/components//*.{tsx,ts}, src/hooks//*.{ts}, src/lib//*.{ts}]
alwaysApply: true

---

- Keep component and hook files focused and single-responsibility
- Extract shared logic into custom hooks under src/hooks
- Place reusable utility functions under src/lib and import them where needed
- Name custom hooks starting with "use" prefix (e.g., useLeads, useTasks)
- Follow atomic design structure for component nesting (Atoms, Molecules, Organisms)
- Document non-trivial utilities and hooks with concise JSDoc comments
- Always reference and improve existing utilities/hooks before creating new ones
- Avoid duplicated logic across files by centralizing concerns (e.g., date utils, storage utils)

---

description: Enforce database schema and migration best practices
globs: [prisma/schema.prisma]
alwaysApply: true

---

- Keep prisma/schema.prisma as the source of truth for all database changes
- After modifying the schema, always run npx prisma generate to update types
- Maintain relationships explicitly using Prisma relation fields
- Keep naming consistent across DB fields and frontend types
- Prefer enums for static value sets like LeadStatus or LeadSource
- Write clear migration messages when running prisma migrate dev (e.g., "add Task.priority field")

---

description: Apply best practices for storage, file handling, and Supabase integration
globs: [src//*.{tsx,ts}]
alwaysApply: true

---

- Always store Supabase Storage paths relative to the bucket (not full URLs)
- Format storage paths as {folder}/{entityId}/{filename.extension}
- Generate signed URLs for protected document access
- Validate file uploads client-side before sending to Supabase
- Keep bucket separation clear (avatars, documents, imports)
- Reuse existing Supabase storage utilities instead of creating new upload/download functions

---

description: Guarantee frontend performance, UI consistency, and responsiveness
globs: [src/components//*.{tsx,ts,jsx}]
alwaysApply: true

---

- Use Tailwind utilities for spacing, flexbox, and grid layouts
- Apply consistent visual spacing: gap-x-6, gap-y-4, p-6, etc.
- Follow a readable hierarchy: title > subtitle > description > CTA
- Avoid deeply nested DOM structures to maintain clean markup
- Prioritize mobile responsiveness using Tailwind breakpoints
- Reuse and customize shadcn/ui components to fit CRM aesthetic
- Apply loading skeletons or spinners for all async data loads
- Keep UI interactions accessible: proper aria-labels, keyboard navigation, and focus states

---

description: Apply API communication, error handling, and state management standards
globs: [src/app/api//*.{ts}, src/hooks//*.{ts}]
alwaysApply: true

---

- Use Zod for validating incoming API request bodies
- Return structured API responses: { success: boolean, data: any, error?: string }
- Handle Prisma errors gracefully and provide clear error messages
- Standardize TanStack Query keys for caching (e.g., ["leads"], ["tasks"], ["products"])
- Invalidate query caches after successful create, update, or delete operations
- Show user-friendly toast notifications on API success or error states

---

description: Establish authentication, authorization, and session management rules
globs: [src//*.{tsx,ts}]
alwaysApply: true

---

- Protect private routes using middleware or session checks
- Always validate Supabase session tokens server-side for sensitive operations
- Differentiate user roles (e.g., admin, sales, viewer) for permission control
- Reuse existing authentication hooks/utilities before implementing new ones
- Store only minimal necessary session information in local state

---

description: Maintain coding style, naming, and documentation consistency
globs: [src//*.{tsx,ts}]
alwaysApply: true

---

- Use PascalCase for components and TypeScript types/interfaces
- Use camelCase for variables, function names, and props
- Keep filenames in kebab-case
- Prefix event handlers with "handle" (e.g., handleCreateLead)
- Prefix boolean variables with is/has/can
- Write brief, meaningful commit messages following Conventional Commits (feat:, fix:, chore:)
- Update README.md or relevant documentation if major changes are introduced
