// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  YOUTH
  ADOLESCENTS
  COMPANIES
  MUNICIPAL_GOVERNMENTS
  TRAINING_CENTERS
  NGOS_AND_FOUNDATIONS
  SUPERADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED
}

enum EducationLevel {
  PRIMARY
  SECONDARY
  TECHNICAL
  UNIVERSITY
  POSTGRADUATE
  OTHER
}

enum CompanySize {
  MICRO
  SMALL
  MEDIUM
  LARGE
}

model Profile {
  id            String               @id @default(cuid())
  userId        String               @unique
  avatarUrl     String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  active        Boolean              @default(true)
  status        UserStatus           @default(ACTIVE)
  role          UserRole             @default(YOUTH)

  // Basic Information (All users)
  firstName     String?              @map("first_name")
  lastName      String?              @map("last_name")
  email         String?
  phone         String?
  address       String?
  municipality  String?
  department    String?              @default("Cochabamba")
  country       String?              @default("Bolivia")
  birthDate     DateTime?            @map("birth_date")
  gender        String?
  
  // Identification
  documentType  String?              @map("document_type") // CI, Passport, etc.
  documentNumber String?             @map("document_number")
  
  // For YOUTH and ADOLESCENTS
  educationLevel     EducationLevel?      @map("education_level")
  currentInstitution String?              @map("current_institution")
  graduationYear     Int?                 @map("graduation_year")
  isStudying         Boolean?             @map("is_studying")
  skills             String[]             // JSON array of skills
  interests          String[]             // JSON array of interests
  workExperience     Json?                @map("work_experience") // JSON object with work history
  
  // For COMPANIES
  companyName        String?              @map("company_name")
  taxId              String?              @map("tax_id") // NIT
  legalRepresentative String?             @map("legal_representative")
  businessSector     String?              @map("business_sector")
  companySize        CompanySize?         @map("company_size")
  companyDescription String?              @map("company_description")
  website            String?
  foundedYear        Int?                 @map("founded_year")
  
  // For INSTITUTIONS (Governments, Centers, NGOs)
  institutionName    String?              @map("institution_name")
  institutionType    String?              @map("institution_type")
  serviceArea        String?              @map("service_area")
  specialization     String[]             // Areas of specialization
  institutionDescription String?          @map("institution_description")
  
  // Profile Completion
  profileCompletion  Int                 @default(0) @map("profile_completion") // Percentage
  lastLoginAt        DateTime?           @map("last_login_at")
  
  // Parental Consent (for ADOLESCENTS)
  parentalConsent    Boolean             @default(false) @map("parental_consent")
  parentEmail        String?             @map("parent_email")
  consentDate        DateTime?           @map("consent_date")
  
  // Relations
  jobApplications    JobApplication[]
  jobOffers          JobOffer[]
  courseEnrollments  CourseEnrollment[]
  entrepreneurships  Entrepreneurship[]
  
  @@index([userId])
  @@index([role])
  @@index([municipality])
  @@index([status])
  @@map("profiles")
}

// Job Management Models
model JobOffer {
  id                 String               @id @default(cuid())
  title              String
  description        String
  requirements       String
  benefits           String?
  salaryMin          Decimal?             @map("salary_min")
  salaryMax          Decimal?             @map("salary_max")
  contractType       String               @map("contract_type") // PAID, INTERNSHIP, VOLUNTEER
  workSchedule       String               @map("work_schedule") // FULL_TIME, PART_TIME, FLEXIBLE
  workModality       String               @map("work_modality") // ON_SITE, REMOTE, HYBRID
  location           String
  municipality       String
  department         String               @default("Cochabamba")
  experienceLevel    String               @map("experience_level")
  educationRequired  EducationLevel?      @map("education_required")
  skillsRequired     String[]             @map("skills_required")
  applicationDeadline DateTime?           @map("application_deadline")
  isActive           Boolean              @default(true) @map("is_active")
  viewsCount         Int                  @default(0) @map("views_count")
  applicationsCount  Int                  @default(0) @map("applications_count")
  
  // Company Information
  companyId          String               @map("company_id")
  company            Profile              @relation(fields: [companyId], references: [userId])
  
  // Relations
  applications       JobApplication[]
  
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  
  @@index([companyId])
  @@index([municipality])
  @@index([contractType])
  @@index([workModality])
  @@index([isActive])
  @@map("job_offers")
}

model JobApplication {
  id                 String               @id @default(cuid())
  applicantId        String               @map("applicant_id")
  jobOfferId         String               @map("job_offer_id")
  coverLetter        String?              @map("cover_letter")
  cvUrl              String?              @map("cv_url")
  status             String               @default("SENT") // SENT, UNDER_REVIEW, PRE_SELECTED, REJECTED, HIRED
  appliedAt          DateTime             @default(now()) @map("applied_at")
  reviewedAt         DateTime?            @map("reviewed_at")
  notes              String?              // Company notes about the candidate
  rating             Int?                 // Company rating (1-5)
  
  // Relations
  applicant          Profile              @relation(fields: [applicantId], references: [userId])
  jobOffer           JobOffer             @relation(fields: [jobOfferId], references: [id])
  
  @@unique([applicantId, jobOfferId])
  @@index([applicantId])
  @@index([jobOfferId])
  @@index([status])
  @@map("job_applications")
}

// Training/LMS Models
model Course {
  id                 String               @id @default(cuid())
  title              String
  description        String
  objectives         String[]
  prerequisites      String[]
  duration           Int                  // Duration in hours
  level              String               // BASIC, INTERMEDIATE, ADVANCED
  category           String
  thumbnailUrl       String?              @map("thumbnail_url")
  isMandatory        Boolean              @default(false) @map("is_mandatory")
  isActive           Boolean              @default(true) @map("is_active")
  price              Decimal?             @default(0)
  rating             Decimal?             @default(0)
  studentsCount      Int                  @default(0) @map("students_count")
  completionRate     Decimal?             @default(0) @map("completion_rate")
  
  // Instructor/Institution
  instructorId       String?              @map("instructor_id")
  institutionName    String?              @map("institution_name")
  
  // Content
  modules            CourseModule[]
  enrollments        CourseEnrollment[]
  
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  
  @@index([category])
  @@index([level])
  @@index([isMandatory])
  @@index([isActive])
  @@map("courses")
}

model CourseModule {
  id                 String               @id @default(cuid())
  courseId           String               @map("course_id")
  title              String
  description        String?
  orderIndex         Int                  @map("order_index")
  estimatedDuration  Int                  @map("estimated_duration") // in minutes
  
  // Content
  lessons            Lesson[]
  
  // Relations
  course             Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@index([courseId])
  @@index([orderIndex])
  @@map("course_modules")
}

model Lesson {
  id                 String               @id @default(cuid())
  moduleId           String               @map("module_id")
  title              String
  description        String?
  content            String               // HTML content or markdown
  contentType        String               @map("content_type") // VIDEO, TEXT, QUIZ, EXERCISE
  videoUrl           String?              @map("video_url")
  duration           Int?                 // in minutes
  orderIndex         Int                  @map("order_index")
  isRequired         Boolean              @default(true) @map("is_required")
  
  // Relations
  module             CourseModule         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress           LessonProgress[]
  
  @@index([moduleId])
  @@index([orderIndex])
  @@map("lessons")
}

model CourseEnrollment {
  id                 String               @id @default(cuid())
  studentId          String               @map("student_id")
  courseId           String               @map("course_id")
  enrolledAt         DateTime             @default(now()) @map("enrolled_at")
  startedAt          DateTime?            @map("started_at")
  completedAt        DateTime?            @map("completed_at")
  progress           Decimal              @default(0) // Percentage completed
  currentModuleId    String?              @map("current_module_id")
  currentLessonId    String?              @map("current_lesson_id")
  certificateUrl     String?              @map("certificate_url")
  
  // Relations
  student            Profile              @relation(fields: [studentId], references: [userId])
  course             Course               @relation(fields: [courseId], references: [id])
  lessonProgress     LessonProgress[]
  
  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
  @@map("course_enrollments")
}

model LessonProgress {
  id                 String               @id @default(cuid())
  enrollmentId       String               @map("enrollment_id")
  lessonId           String               @map("lesson_id")
  isCompleted        Boolean              @default(false) @map("is_completed")
  completedAt        DateTime?            @map("completed_at")
  timeSpent          Int                  @default(0) @map("time_spent") // in minutes
  
  // Relations
  enrollment         CourseEnrollment     @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lesson             Lesson               @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([enrollmentId, lessonId])
  @@index([enrollmentId])
  @@index([lessonId])
  @@map("lesson_progress")
}

// Entrepreneurship Models
model Entrepreneurship {
  id                 String               @id @default(cuid())
  ownerId            String               @map("owner_id")
  name               String
  description        String
  category           String
  subcategory        String?
  businessStage      String               @map("business_stage") // IDEA, STARTUP, GROWING, ESTABLISHED
  logo               String?
  images             String[]             // Array of image URLs
  website            String?
  email              String?
  phone              String?
  address            String?
  municipality       String
  department         String               @default("Cochabamba")
  socialMedia        Json?                @map("social_media") // JSON object with social media links
  
  // Business Information
  founded            DateTime?
  employees          Int?
  annualRevenue      Decimal?             @map("annual_revenue")
  businessModel      String?              @map("business_model")
  targetMarket       String?              @map("target_market")
  
  // Platform Specific
  isPublic           Boolean              @default(true) @map("is_public")
  isActive           Boolean              @default(true) @map("is_active")
  viewsCount         Int                  @default(0) @map("views_count")
  rating             Decimal?             @default(0)
  reviewsCount       Int                  @default(0) @map("reviews_count")
  
  // Relations
  owner              Profile              @relation(fields: [ownerId], references: [userId])
  businessPlan       BusinessPlan?
  
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  
  @@index([ownerId])
  @@index([category])
  @@index([municipality])
  @@index([businessStage])
  @@index([isActive, isPublic])
  @@map("entrepreneurships")
}

model BusinessPlan {
  id                     String               @id @default(cuid())
  entrepreneurshipId     String               @unique @map("entrepreneurship_id")
  
  // Executive Summary
  executiveSummary       String?              @map("executive_summary")
  missionStatement       String?              @map("mission_statement")
  visionStatement        String?              @map("vision_statement")
  
  // Market Analysis
  marketAnalysis         String?              @map("market_analysis")
  targetMarket           String?              @map("target_market")
  competitiveAnalysis    String?              @map("competitive_analysis")
  
  // Business Model
  businessModelCanvas    Json?                @map("business_model_canvas")
  revenueStreams         String[]             @map("revenue_streams")
  costStructure          Json?                @map("cost_structure")
  
  // Marketing Plan
  marketingStrategy      String?              @map("marketing_strategy")
  pricingStrategy        String?              @map("pricing_strategy")
  salesStrategy          String?              @map("sales_strategy")
  
  // Financial Projections
  initialInvestment      Decimal?             @map("initial_investment")
  monthlyExpenses        Decimal?             @map("monthly_expenses")
  revenueProjection      Json?                @map("revenue_projection") // 12-month projection
  breakEvenPoint         Int?                 @map("break_even_point") // in months
  roi                    Decimal?             // Return on Investment
  
  // Risk Analysis
  riskAnalysis           String?              @map("risk_analysis")
  mitigationStrategies   String[]             @map("mitigation_strategies")
  
  // Operational Plan
  operationalPlan        String?              @map("operational_plan")
  managementTeam         Json?                @map("management_team")
  
  // Status
  isCompleted            Boolean              @default(false) @map("is_completed")
  lastSection            String?              @map("last_section")
  completionPercentage   Int                  @default(0) @map("completion_percentage")
  
  // Relations
  entrepreneurship       Entrepreneurship     @relation(fields: [entrepreneurshipId], references: [id], onDelete: Cascade)
  
  createdAt              DateTime             @default(now()) @map("created_at")
  updatedAt              DateTime             @updatedAt @map("updated_at")
  
  @@map("business_plans")
}
