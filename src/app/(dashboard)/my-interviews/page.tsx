"use client";

import React, { useState } from "react";
import SpeechRecognition, {
  useSpeechRecognition,
} from "react-speech-recognition";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
} from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
} from "@/components/ui/carousel";
import { Mic, MicOff, ArrowRight } from "lucide-react";

const interviewQuestions = [
  "CuÃ©ntame sobre ti.",
  "Â¿Por quÃ© estÃ¡s interesado en esta posiciÃ³n?",
  "Â¿QuÃ© sabes sobre nuestra empresa?",
  "Â¿CuÃ¡l ha sido tu mayor reto y cÃ³mo lo superaste?",
  "Â¿DÃ³nde te ves en 5 aÃ±os?",
  "Â¿CuÃ¡l es tu mayor fortaleza?",
  "Â¿CuÃ¡l es tu mayor debilidad?",
  "Â¿CÃ³mo manejas el trabajo bajo presiÃ³n?",
  "HÃ¡blame de un conflicto laboral y cÃ³mo lo resolviste.",
  "Â¿QuÃ© te motiva a trabajar cada dÃ­a?",
  "Â¿Prefieres trabajar solo o en equipo?",
  "Â¿CÃ³mo te mantienes organizado?",
  "Â¿QuÃ© harÃ­as si no estÃ¡s de acuerdo con tu jefe?",
  "Â¿CÃ³mo manejas los errores?",
  "Â¿QuÃ© logros laborales te enorgullecen mÃ¡s?",
  "Â¿Tienes experiencia liderando equipos?",
  "Â¿QuÃ© esperas de tu prÃ³ximo trabajo?",
  "Â¿EstÃ¡s dispuesto/a a aprender nuevas habilidades?",
  "Â¿Tienes alguna pregunta para nosotros?",
  "Â¿Por quÃ© deberÃ­amos contratarte?",
];

const tips = [
  "Habla con claridad y confianza.",
  "Toma una pausa antes de responder.",
  "SÃ© honesto, pero enfocado.",
  "No hables demasiado, sÃ© conciso.",
  "Practica con anticipaciÃ³n.",
  "Escucha bien la pregunta antes de responder.",
  "Haz contacto visual (si aplica).",
  "Evita palabras de relleno como 'eh', 'este'.",
  "SonrÃ­e naturalmente.",
  "No memorices, comprende.",
];

export default function InterviewSimulation() {
  const [step, setStep] = useState(0);
  const [responses, setResponses] = useState<string[]>([]);
  const [currentText, setCurrentText] = useState("");

  const {
    transcript,
    listening,
    resetTranscript,
    browserSupportsSpeechRecognition,
  } = useSpeechRecognition();

  if (!browserSupportsSpeechRecognition) {
    return <div>Tu navegador no soporta reconocimiento de voz.</div>;
  }

  const handleNext = () => {
    const answer = transcript || currentText;
    if (!answer.trim()) return;

    const updated = [...responses];
    updated[step] = answer;
    setResponses(updated);

    resetTranscript();
    setCurrentText("");
    setStep((prev) => prev + 1);
  };

  const handleStart = () => {
    resetTranscript();
    SpeechRecognition.startListening({ continuous: true, language: "es-ES" });
  };

  const handleStop = () => {
    SpeechRecognition.stopListening();
    setCurrentText(transcript);
  };

  const finished = step >= interviewQuestions.length;

  return (
    <div className="min-h-screen flex flex-col items-center justify-center px-4 py-12">
      <div className="w-full max-w-4xl space-y-8">
        <Card className="shadow-xl">
          <CardHeader>
            <CardTitle className="text-xl md:text-2xl font-bold">
              {finished
                ? "ðŸŽ‰ Entrevista completada"
                : `Paso ${step + 1} de ${interviewQuestions.length}: ${interviewQuestions[step]}`}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {finished ? (
              <div className="space-y-4">
                <p className="text-muted-foreground text-sm">
                  AquÃ­ tienes un resumen de tus respuestas:
                </p>
                <ul className="space-y-2">
                  {interviewQuestions.map((q, i) => (
                    <li key={i}>
                      <strong>{i + 1}. {q}</strong>
                      <p className="text-muted-foreground">
                        {responses[i] || "Sin respuesta"}
                      </p>
                    </li>
                  ))}
                </ul>
              </div>
            ) : (
              <>
                <Textarea
                  placeholder="Tu respuesta aparecerÃ¡ aquÃ­..."
                  value={listening ? transcript : currentText}
                  onChange={(e) => setCurrentText(e.target.value)}
                  rows={6}
                  className="text-base"
                />
                <div className="flex gap-3 justify-between flex-wrap">
                  {listening ? (
                    <Button
                      variant="destructive"
                      onClick={handleStop}
                      className="flex gap-2"
                    >
                      <MicOff size={16} />
                      Detener
                    </Button>
                  ) : (
                    <Button onClick={handleStart} className="flex gap-2">
                      <Mic size={16} />
                      Empezar a hablar
                    </Button>
                  )}
                  <Button
                    onClick={handleNext}
                    disabled={step >= interviewQuestions.length}
                    className="flex gap-2 ml-auto"
                  >
                    Siguiente <ArrowRight size={16} />
                  </Button>
                </div>
              </>
            )}
          </CardContent>
        </Card>

        {/* Carrusel de tips */}
        <div className="space-y-2">
          <h2 className="text-lg font-semibold text-center">
            Tips para la entrevista
          </h2>
          <Carousel className="w-full">
            <CarouselContent>
              {tips.map((tip, index) => (
                <CarouselItem
                  key={index}
                  className="basis-full md:basis-1/3 p-2"
                >
                  <Card className="h-full flex items-center justify-center p-6 text-sm text-center shadow-sm">
                    {tip}
                  </Card>
                </CarouselItem>
              ))}
            </CarouselContent>
          </Carousel>
        </div>
      </div>
    </div>
  );
}
